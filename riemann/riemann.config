; Importer les bibliothèques nécessaires
(require '[riemann.influxdb :as influxdb])

; Configuration des serveurs d'écoute
(tcp-server {:host "0.0.0.0" :port 5555})
(udp-server {:host "0.0.0.0" :port 5555})
(ws-server  {:host "0.0.0.0" :port 5556})

; Configuration du logging - Plus verbose pour le débogage
(logging/init {:file "/var/log/riemann.log"
               :console true
               :level :debug})

; Afficher un message au démarrage
(info "🚀 Riemann démarre avec la configuration de débogage")

; Configuration de base InfluxDB
(def influxdb-config
  {:host "influxdb" 
   :port 8086 
   :db "riemann"
   :username "riemann"
   :password "riemann"
   :version :v1})  ; Spécifier la version d'InfluxDB

; Créer un client InfluxDB pour une utilisation plus stable
(def influx-writer
  (influxdb/influxdb influxdb-config))

; Définition des streams et règles
(let [index (index)]
  (streams
    ; Indexation des événements
    (fn [event]
      (info "🔍 Indexation de l'événement:" event)
      (index event))
    
    ; Log tous les événements reçus avec leurs détails
    (fn [event]
      (info "📥 Événement reçu:"
            (select-keys event [:host :service :metric :time :tags]))
      event)
    
    ; Traitement de tous les événements avec une métrique non-nil
    (where (not (nil? :metric))
      (fn [event]
        (info "📊 Envoi vers InfluxDB:" (select-keys event [:host :service :metric]))
        (try
          (influx-writer event)
          (info "✅ Envoi à InfluxDB réussi pour" (:host event) "service:" (:service event))
          (catch Exception e
            (error "❌ Erreur d'envoi à InfluxDB:" (.getMessage e))))))
    
    ; Traitement spécifique pour les métriques CPU
    (where (service "cpu")
      (fn [event]
        (info "🖥️ Métrique CPU reçue:" (select-keys event [:host :metric]))
        
        ; Alertes CPU élevé (>80%)
        (when (and (:metric event) (> (:metric event) 80))
          (warn "⚠️ ALERTE: CPU élevé sur" (:host event) "=" (:metric event) "%"))
        
        event))
    
    ; Traitement spécifique pour les métriques mémoire
    (where (service "memory")
      (fn [event]
        (info "💾 Métrique mémoire reçue:" (select-keys event [:host :metric]))
        
        ; Alertes mémoire élevée (>90%)
        (when (and (:metric event) (> (:metric event) 90))
          (warn "⚠️ ALERTE: Mémoire élevée sur" (:host event) "=" (:metric event) "%"))
        
        event))
    
    ; Traitement des événements de latence
    (where (service #".*latency.*")
      (fn [event]
        (info "⏱️ Métrique de latence reçue:" (select-keys event [:host :service :metric]))
        
        ; Alertes latence élevée (>1.0)
        (when (and (:metric event) (> (:metric event) 1.0))
          (warn "⚠️ ALERTE: Latence élevée sur" (:host event) "service:" (:service event) "=" (:metric event)))
        
        event))))

; Test d'injection manuel d'un événement pour vérifier que tout fonctionne
(try
  (info "🧪 Injection d'un événement de test")
  (let [test-event {:host "test-riemann"
                    :service "cpu"
                    :metric 50.0
                    :time (/ (System/currentTimeMillis) 1000)
                    :tags ["test"]}]
    (riemann.core/stream! @riemann.config/core test-event)
    (influx-writer test-event)
    (info "✅ Événement test injecté avec succès"))
  (catch Exception e
    (error "❌ Erreur lors de l'injection du test:" (.getMessage e))))

(info "🔄 Configuration Riemann chargée - En attente d'événements...")